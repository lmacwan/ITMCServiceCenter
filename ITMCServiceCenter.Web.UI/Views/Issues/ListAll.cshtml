@using Telerik.Web.Mvc.UI
@using ITMCServiceCenter.Web.Domain
@using ITMCServiceCenter.Web.Domain.Resources;
@using ITMCServiceCenter.Web.UI

@{
    ViewBag.Title = ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.titleIssues;
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@section scripts {
    <script type="text/javascript">
        function viewNewIssueWindow(issueId) {
            var newProjectWindow = $('#IssueWindow').data('tWindow');
            var baseUrl = window.location.href;
            var url = baseUrl.substring(0, baseUrl.lastIndexOf('/'));

            $.ajax({
                type: "GET",
                cache: false,
                url: url + "/GetNewIssuePartialAjax/" + issueId,
                data: null,
                dataType: 'text',
                success: function (htmlContent) {
                    $("#divIssueWindowContainer").html(htmlContent);
                    newProjectWindow.center();
                    newProjectWindow.open();
                    $.validator.unobtrusive.parse($('#IssueWindow'));
                },
                error: function (msg) {
                    alert('Error : ' + msg.toString());
                }
            });
        }

        function saveIssue() {
            var form = $("#frmSaveIssue");
            $.ajax({
                type: "POST",
                url: form.attr('action'),
                data: form.serialize()
            })
            .success(function (result) {
                if (result) {
                    $('#IssueWindow').data('tWindow').close();
                } else {
                    alert("not saved..");
                }
            })
            .error(function () {
                alert("not saved..");
            });
        }
    </script>
}


<div class="row">
    <div class="col-xs-12">
        @(Html.Telerik().Grid<IssueModel>()
            .Name("IssuesGrid")
            .DataKeys(datakKey => datakKey.Add(key => key.Issue.Id))
            .DataBinding(dataBinding => dataBinding.Ajax().Select("GetAllIssuesAjax", "Issues"))
            .Columns(columns =>
            {
                columns.Bound(column => column.Issue.Category).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resCategory);
                columns.Bound(column => column.Issue.Id)
                       .Filterable(false)
                       .Sortable(false)
                       .Groupable(false)
                       .Width(20)
                       .Title(String.Empty)
                       .ClientTemplate("<center><a title='" + ITMCServiceCenterResource.lblDetail + "' href='JavaScript:viewDetails(<#= Issue.Id #>);'><i class='glyphicon glyphicon-info-sign'></i></a></center>");
                columns.Bound(column => column.Issue.Title).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resProject);
                columns.Bound(column => column.Issue.Description).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resDescription);
                columns.Bound(column => column.Issue.Priority).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resPriority);
                columns.Bound(column => column.Issue.Status).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resStatus);
                columns.Bound(column => column.Issue.EndDate).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resEndDate);
                columns.Bound(column => column.TestingTeam.MembersString)
                    .ClientTemplate("<#= TestingTeam.MembersString #>").Title("Testing Team");
                columns.Bound(column => column.Issue.CreatedOn).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resCreatedOn);
                columns.Bound(column => column.Issue.CreatedBy).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resCreatedBy);
                columns.Bound(column => column.Issue.ModifiedOn).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resModifiedOn);
                columns.Bound(column => column.Issue.Module).Title
(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resModule);
                columns.Bound(column => column.Issue.ProjectTitle).Title(ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.resProject);

                columns.Bound(column => column.Issue.Id)
                          .Filterable(false)
                          .Sortable(false)
                          .Groupable(false)
                          .Width(20)
                          .HtmlAttributes(new { @originalWidth = "20" })
                          .Title(String.Empty)
                          .ClientTemplate("<center><a title='" + ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.lblEdit + "' href='JavaScript:viewNewIssueWindow(<#= Issue.Id #>);'><i class='glyphicon glyphicon-pencil'></i></a></center>");
                columns.Bound(column => column.Issue.Id)
                            .Filterable(false)
                            .Sortable(false)
                            .Groupable(false)
                            .Width(20)
                            .HtmlAttributes(new { @originalWidth = "20" })
                            .Title(String.Empty)
                            .ClientTemplate("<center><a title='" + ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.lblDelete + "' href='JavaScript:DeleteIssue(<#= Issue.Id #>);'><i class='glyphicon glyphicon-remove-circle'></i></a></center>");
            })
            .ToolBar(commands => commands
                                       .Custom()
                                       .Ajax(true)
                                       .ButtonType(GridButtonType.Text)
                                       .HtmlAttributes(new { @class = "new", onclick = "viewNewIssueWindow(-1)" })
                                       .Text("<i class='glyphicon glyphicon-plus-sign'></i> "+ITMCServiceCenter.Web.Domain.Resources.ITMCServiceCenterResource.lblNew))
            .Sortable()
            .Filterable()
            .Pageable(paging => paging.PageSize(5).Style(GridPagerStyles.NextPreviousAndNumeric).Position(GridPagerPosition.Bottom))
                //.Groupable(grouping => grouping.Groups(groups => groups.Add(col => col.ProjectTitle)))
        )
    </div>
</div>

@{ Html.Telerik().Window()
        .Name("IssueWindow")
        .Title("New Issue")
        .Draggable(true)
        .Resizable(resizing =>
                        resizing
                            .Enabled(false)
                  )
        .Modal(true)
        .Buttons(b => b.Close())
        .Width(586)
        .Visible(false)
        .Content(@<text>
    <div id="divIssueWindowContainer"></div>
    </text>)
        .Scrollable(true)
        .Render();
}